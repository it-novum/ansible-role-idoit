- name: Switch to MySQL vendor from system on Ubuntu 14 and Debian 8
  set_fact: mysql_type=vendor
  when: >
    mysql_type == "system" and
    (
      ansible_distribution_release == "trusty" or
      ansible_distribution_release == "jessie"
    )

- set_fact: 
    apt_dependencies:
      - php5-memcache
      - memcached
      - php5-snmp

- set_fact: 
    apt_dependencies:
      - php-memcache
      - memcached
      - php7.0-snmp
      - php7.0-zip
      - php7.0-bcmath
  when: ansible_distribution_version == "16.04"

- set_fact: 
    php_fpm_service_name: "php5-fpm"

- set_fact: 
    php_fpm_service_name: "php7.0-fpm"
  when: ansible_distribution_version == "16.04"

- name: MySQL
  include_role: name=mysql
  static: no

- name: Apache
  include_role: name=apache
  static: no

- name: Vhost
  include_role: name=vhost
  static: no
  vars:
    use_php: true

- name: APT | Install dependencies
  apt: name={{ item }}
  with_items: "{{ apt_dependencies }}"


- name: Fact | createdb
  set_fact: "{{item.key}}={{item.value}}"
  with_items:
    - key: "createdb_dbs"
      value: "mysql"
    - key: "createdb_config"
      value: "{{ vhost_directory }}/.my.cnf"
    - key: "createdb_user"
      value: "{{ idoit_database_user }}"
    - key: "createdb_host"
      value: "127.0.0.1"

- name: System Database
  include_role: name=createdb
  vars:
    createdb_database: "{{ idoit_database_system }}"
  static: no

- name: Data Database
  include_role: name=createdb
  vars:
    createdb_database: "{{ idoit_database_data }}"
  static: no

- name: restart service
  service:
   name: "{{ item }}"
   state: restarted
  with_items:
    - mysql
    - apache2
    - "{{ php_fpm_service_name }}"

- name: Check idoit instance
  stat: path={{ vhost_directory }}/htdocs/setup/install.sh
  register: idoit_install_sh

- name: Check idoit configuration
  stat: path={{ vhost_directory }}/htdocs/src/config.inc.php
  register: idoit_config_inc

- name: check if idoit installation archive exists
  local_action: stat path={{idoit_zip_file}}
  register: idoit_local_zip_stat

- fail: msg="idoit isn't installed and installation archive not found"
  when: not idoit_install_sh.stat.exists and not idoit_local_zip_stat.stat.exists

- block:
  - pause:
      prompt: If you press any key the installation of idoit will begin or abort with ctrl-c

  - name: Extract idoit
    unarchive: src={{ idoit_zip_file }} dest={{vhost_directory}}/htdocs
  when: not idoit_install_sh.stat.exists

- block:
  - pause: prompt="Detected idoit installation without configuration. Press any key to overwrite the idoit database or ctrl-c to abort!"

  - name: Import system database
    mysql_db: name={{ idoit_database_system }} encoding=utf8 state=import target={{ vhost_directory }}/htdocs/setup/sql/idoit_system.sql

  - name: Import data database
    mysql_db: name={{ idoit_database_data }} encoding=utf8 state=import target={{ vhost_directory }}/htdocs/setup/sql/idoit_data.sql

  - name: Create default mandator sql
    copy:
      dest: "/root/.ansible/mandator.sql"
      content: "REPLACE INTO isys_mandator VALUES (1, '{{ idoit_default_mandator }}', '{{ idoit_default_mandator }}', 'cache_{{ idoit_default_mandator }}', 'default', '127.0.0.1', '3306', '{{ idoit_database_data }}', '{{ createdb_user }}', '{{ createdb_password }}', '', '1', '1');"

  - name: Create default mandator
    mysql_db: name={{ idoit_database_system }} encoding=utf8 state=import target=/root/.ansible/mandator.sql

  - name: Delete default mandator sql
    file: state=absent path=/root/.ansible/mandator.sql

  - name: Copy configuration template
    copy: src={{ vhost_directory }}/htdocs/setup/config_template.inc.php dest={{ vhost_directory }}/htdocs/src/config.inc.php owner={{ vhost_user }} group={{ vhost_user }} mode=0644 remote_src=true
  
  - name: Generate Random Admin password
    shell: < /dev/urandom tr -dc "_A-Z-a-z-0-9\+\-:." | head -c18
    register: random_output

  - name: Apply configuration
    replace: dest={{ vhost_directory }}/htdocs/src/config.inc.php regexp={{ item.regexp }} replace={{ item.replace }}
    with_items:
      - regexp: "%config.adminauth.username%"
        replace: admin
      - regexp: "%config.adminauth.password%"
        replace: "{{random_output.stdout}}"
      - regexp: "%config.db.host%"
        replace: 127.0.0.1
      - regexp: "%config.db.port%"
        replace: 3306
      - regexp: "%config.db.username%"
        replace: "{{ createdb_user }}"
      - regexp: "%config.db.password%"
        replace: "{{ createdb_password }}"
      - regexp: "%config.db.name%"
        replace: "{{ idoit_database_system }}"
  when: not idoit_config_inc.stat.exists

- name: Set permissions
  tree_permission:
    root_path: "{{ vhost_directory }}/htdocs"
    regexp:
      - paths:
          - ".*"
        file_mode: "0644"
        dir_mode: "0755"
        file_owner: "{{ vhost_user }}"
        file_group: "{{ vhost_user }}"
        dir_owner: "{{ vhost_user }}"
        dir_group: "{{ vhost_user }}"
      - paths:
          - "/"
        dir_mode: "0750"
        dir_owner: "{{ vhost_user }}"
        dir_group: "{{ vhost_user }}"
      - paths:
          - "/checkmk_transfer.sh"
          - "/controller"
          - "/idoit-rights.sh"
          - "/import"
          - "/tenants"
          - "/updatecheck"
        file_mode: "0755"
        file_owner: "{{ vhost_user }}"
        file_group: "{{ vhost_user }}"

- name: Cleanup cache cron
  cron:
    name: "idoit cache cleanup"
    cron_file: "idoit"
    user: "{{ vhost_user }}"
    minute: "0"
    hour: "1"
    job: "find '{{ vhost_directory }}/htdocs/temp/' -mindepth 1 -maxdepth 1 -exec rm -rf {} \\;"

- debug:
    msg: "Idoit admin backend password: {{random_output.stdout}}"
  when: random_output.stdout is defined
